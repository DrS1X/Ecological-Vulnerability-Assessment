var DEM = ee.Image("MERIT/DEM/v1_0_3"),
    LandUse = ee.ImageCollection("MODIS/006/MCD12Q1"),
    NPP = ee.ImageCollection("MODIS/006/MOD17A3HGF"),
    NDVI = ee.ImageCollection("MODIS/006/MOD13A1"),
    HumanModification = ee.ImageCollection("CSP/HM/GlobalHumanModification"),
    Climate = ee.ImageCollection("ECMWF/ERA5/MONTHLY"),
    Population = ee.ImageCollection("WorldPop/GP/100m/pop");

var crs = NPP.first().projection();
var scale = NPP.first().projection().nominalScale();

var resultBandName,vulnerability;
var weight = {
  'dem': 1,
  'aspect': 1,
  'slope': 1,
  'relief': 1,
  'organismAbundance': 1,
  'landUseDegree': 1,
  'NPP': 1,
  'population': 1,
  'NDVI': 1,
  'precipitation': 1,
  'temperature': 1
};

var isPos = {
  dem: 0,
  aspect: 1,
  slope: 1,
  relief: 1,
  organismAbundance: 0,
  landUseDegree: 1,
  NPP: 0,
  population: 1,
  NDVI: 0,
  precipitation: 0,
  temperature: 0
};

function Compute(year, roi){

  var year1 = ee.Date(year);
  var year2 = year1.advance(1,'year');
  
  //var roi = Region.first().geometry();
  //Map.centerObject(roi, 6);
  //Map.addLayer(roi.geometry(),{color: "red"},"roi");
  
  var lu = LandUse.filterDate(year1,year2).select("LC_Prop2").first().clip(roi);
  var luDegree = lu.expression(
      "b(0) < 3 ? 1" +
        ": b(0) == 9 ? 4" +
          ": b(0) == 36 ? 3" +
             ": (b(0) == 25 || b(0) == 35) ? 2.5" +
               ": 2"
      ).clip(roi).rename('landUseDegree');
  /*
  biologicalAbundance = 
  (0.11*cultivatedArea + 0.35*forestArea + 0.21*grassArea + 0.28*waterArea 
  + 0.04*constructionArea + 0.11*unutilizedArea)/totalArea
  */
  var organismAbundance = lu.expression(
    "b(0) <= 2 ? 0.11" +
     ": b(0) == 3 ? 0.28" +
       ": b(0) == 9 ? 0.04" +
         ": b(0) == 25 ? 0.23" +
          ": b(0) == 30 ? 0.21" +
            ": b(0) == 35 ? 0.16" +
             ": b(0) == 36 ? 0.11" +
              ": 0.35"
    ).clip(roi).rename('organismAbundance');
  
  var npp = NPP.filterDate(year1,year2).select("Npp").first().clip(roi).rename('NPP');
  
  var pop = Population.filterDate(year1,year2).select("population")
             .filterBounds(roi).first().clip(roi);
  
  var dem = DEM.clip(roi).reproject(crs);
  var aspect = ee.Terrain.aspect(dem);
  var slope = ee.Terrain.slope(dem);
  var minMax = dem.reduceNeighborhood({
    reducer: ee.Reducer.minMax(),
    kernel: ee.Kernel.circle(5)
  }).reproject(dem.projection());
  var relief = minMax.select('dem_max').subtract(minMax.select('dem_min'));
  relief = relief.rename('relief');

  var Mean = function(imColl, bandName, newBandName){
    var m = imColl.filterDate(year1,year2).select(bandName)
              .map(function(image){
                return image.clip(roi);})
              .mean().reproject(crs);
   return m.rename(newBandName);
  };
  
  var ndvi = Mean(NDVI, 'NDVI', 'NDVI');
  var precipitation = Mean(Climate,'total_precipitation','precipitation');
  var temperature = Mean(Climate, 'mean_2m_air_temperature','temperature');
  var one = ee.Image.constant(1).clip(roi);
  
  var imageList = [dem,aspect,slope,relief,organismAbundance,luDegree,npp,pop,ndvi,precipitation,temperature];
  /*
  var ori = ee.Image.cat(imageList);
  var ran = ori.reduceRegion({
                  reducer: ee.Reducer.minMax(),
                  geometry: roi,
                  scale: scale,
                  crs: crs,
                  tileScale: 16
  });
  
  var numerator=[], denominator=[], symbol=[];
  var max,min;
  for(var key in isPos){
    max = ee.Number(ran.get(key+'_max'));
    min = ee.Number(ran.get(key+'_min')).multiply(-1);
    
    denominator.push( max.add(min) );
    if(isPos[key] == 1){
      symbol.push(ee.Number(1));
      numerator.push(min);
    }else{
      symbol.push(ee.Number(-1));
      numerator.push(max);
    }
  }
var preprocessed = ori.multiply(symbol).add(numerator).divide(denominator);
  */
  var range,bandName;
  for(var i = 0; i < imageList.length; i++){
    range = imageList[i].reduceRegion({
                  reducer: ee.Reducer.minMax(),
                  geometry: roi,
                  scale: scale,
                  crs: crs,
                  tileScale: 16
    });
  //print(range);
    bandName = imageList[i].bandNames().getString(0);
    imageList[i] = imageList[i].unitScale(range.get(bandName.cat("_min")),
                                          range.get(bandName.cat("_max")));
    if(isPos[bandName] == 0){
      imageList[i] = one.subtract(imageList[i]);
    }
    
    //Map.addLayer(imageList[i],{},bandName);
  }
  
  var preprocessed = ee.Image.cat(imageList);
  //Map.addLayer(preprocessed,{},'preprocessed');
  
  var formula = "";
  var weightSum = 0;
  for (var key in weight){
    formula += weight[key].toString()+"*"+"b('"+key+"')+";
    weightSum += weight[key];
  }
  formula = "(" + formula.slice(0,-1) + ")/";
  formula += weightSum.toString();
 //ee.String('EcologicalVulnerability').cat(year1.get('year'));
  vulnerability = preprocessed.expression(formula)
    .rename(resultBandName);
  return vulnerability;
  /*
  Export.image.toDrive({
    image: preprocessed,
    description: "preprocessed",
    folder: "preprocessed",
    fileNamePrefix: "preprocessed"+year1.toString(),
    scale: scale,
    region: roi
  });
  */
}

function init() {
  Map.style().set('cursor', 'crosshair');
  Map.drawingTools().setLinked(false);
  Map.drawingTools().setDrawModes(['rectangle']);
  Map.drawingTools().addLayer([]);
  Map.drawingTools().setShape('rectangle');
  Map.drawingTools().draw();
  Map.onClick(function(coords) {
      var point = ee.Geometry.Point(coords.lon, coords.lat);
      var sampledPoint = vulnerability.reduceRegion(ee.Reducer.mean(), point, 500);
      var computedValue = sampledPoint.get(resultBandName);
      // Request the value from the server and use the results in a function.
      computedValue.evaluate(function(result) {
        try{
          tipLabel.setValue('Ecological Vulnerability: ' + result.toFixed(2));
        }catch(err){
          tipLabel.setValue('Nodata');
        }
      });
  });
  
  var tipLabel = ui.Label('Draw region of interest');
  Map.add(tipLabel);
  
  var titleLabel = ui.Label({
    value: 'Ecological Vulnerability Assessment',
    style: {
            fontWeight: "bold",
            color: "0000ff",
            fontSize: "18px"
          }
  });
  
  var yearLabel =  ui.Label({
          value: "Year",
          style: {
            fontWeight: "bold",
            fontSize: "14px"
          }
        });
  
  /////////////////////////////////////
  var dateSlider = ui.DateSlider({
    start: '2010',
    end: '2020',
    value: '2015',
    period: 365,
    style:{width: '200px',fontSize: "12px"}
  });
  
  var weightTitle = ui.Label({
    value:"Weight",
    style: {
      fontWeight: "bold",
      fontSize: "14px"
    }
  });
  
  var panelList = [weightTitle];
  var subPanel,label,textbox;
  for (var key in weight){
    label = ui.Label({
      value: key,
      style: {fontSize: "12px",width: '110px'}
    });
    
    textbox = ui.Textbox({
     value: 1,
     style: {fontSize: "12px",width: '50px'},
     onChange: function(value) {
       weight.key = value;
       print(key + value);
     }
    });
    subPanel =  ui.Panel({
      layout: ui.Panel.Layout.flow('horizontal'),
      widgets: [
        label, 
        textbox
      ],
      style:{height:'35px'}
    });

    panelList.push(subPanel);
  }
  
  var weightPanel = ui.Panel({
      widgets: panelList,
      style: {
        //border : "1px solid black"
      }
    });
  
  var runButton = ui.Button({
    label: 'RUN',
    style: {
      backgroundColor :'0000ff',
      color:'0000ff',
      stretch: 'horizontal'
    },
    onClick: function() {
      var year = dateSlider.getValue()[0];
      var JSdate = new Date(year);
      resultBandName = "Ecological Vulnerability "+ JSdate.getFullYear();
      var roi = Map.drawingTools().layers().get(0).toGeometry();
      vulnerability = Compute(year, roi);
      Map.drawingTools().layers().get(0).setShown(false);
      var visParam = {min:0.25,max:0.5,palette: ['00FF00','ADFF2F','FFFF00','FFA500','FF0000']};
      // min and max are not the min and max values of the raster
      tipLabel.setValue('Loading...');
      vulnerability.evaluate(function(){
        Map.addLayer(vulnerability, visParam, resultBandName);
        tipLabel.setValue('Click to get value');
      });
    }
  });

 var EVLabel = ui.Label({
   value:''
 })
 var runAndEV = ui.Panel({
   layout: ui.Panel.Layout.flow('horizontal'),
   widgets:[runButton,EVLabel]
   
 })
  var main = ui.Panel({
      widgets: [
        titleLabel,
        yearLabel,
        dateSlider,
        weightPanel,
        runAndEV
      ],
      style: {width: "240px", padding: '8px'}
    });
  ui.root.insert(0, main);
}

function main() {
  //Map.style().set('cursor', 'crosshair');
  Map.setCenter(118,38, 7);
  Map.setOptions("SATELLITE");
  
  init();
}

main();
